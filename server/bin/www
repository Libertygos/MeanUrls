#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config();
const app = require('../app').default();
const debug = require('debug')('MeanUrls:server');
const http = require('http');
const mongo = require('../data/mongo').Mongo;

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => console.log(`Application is listening on port ${ port }`));
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

async function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  try {
    const url = mongo.buildMongoUrl({
      appUser: process.env.APP_USER,
      appPassword: process.env.APP_PWD,
      dbName: process.env.DB_NAME,
      dbCollectionName: process.env.DB_COLLECTION_NAME,
      hostName: process.env.NODE_ENV !== 'production' ? 'localhost' : process.env.MONGO_HOSTNAME,
      mongoPort: process.env.MONGO_PORT || 27017
    });
    await mongo.connect(url);
    console.log('Connected to MongoDb');
  } catch(err) {
    console.error('Unable to connect to MongoDb ::: ', err);
  }
}
